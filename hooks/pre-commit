#!/usr/bin/env bash

###
# Prevent 'unstable_projects', 'legacy' or 'developers' directories from being committed to 'master' branch
###
if [ "$(git symbolic-ref HEAD 2>/dev/null)" == "refs/heads/master" ]
then
    passed=true
    if [ -d "$CBIG_CODE_DIR/unstable_projects" ]; then
        echo "'unstable_projects' folder exists"
        passed=false
    fi

    if [ -d "$CBIG_CODE_DIR/legacy" ]; then
        echo "'legacy' folder exists"
        passed=false
    fi

    if [ -d "$CBIG_CODE_DIR/developers" ]; then
        echo "'developers' folder exists"
        passed=false
    fi

    if [ "$passed" != "true" ]; then
        echo "Committing to 'master' branch is stopped"
        exit 1
    fi
fi

# create log file
logfile=$(mktemp)

######
# 1. (committed files)[.m, .c, .cpp, .sh, .csh, .py, .pl, .r]{stable_projects, utilities, data}
######
###
# Find the committed files that we want to check 
###
files_to_be_committed=($(git diff --cached --name-status | awk '(($1 != "D") && ($1 != "U")) {if ($1 ~ /^R/) print $3; else print $2}'))

###
# Check whether committed files have the 'CBIG_' prefix 
###
# do not check CBIG_ prefix for python scripts
EXTENSIONS_TO_CHECK=("m" "c" "cpp" "sh" "csh" "pl" "r")
DIRECTORIES_TO_CHECK=("stable_projects" "utilities" "data")
EXCLUDED_FILES=("Surf2SurfGui.m" "Vol2SurfGui.m" "CBIG_tested_config.sh" "CBIG_tested_config.csh")

PREFIX="CBIG_"
echo -e "\n==> [Check] Checking that committed files have $PREFIX prefix.." | tee -a $logfile

all_with_valid_prefixes=1
for file_path in "${files_to_be_committed[@]}"
do
    file_in_exclude=0
    file_name=$(basename $file_path)
    for excluded_file in "${EXCLUDED_FILES[@]}"
    do
        if [[ $file_name == $excluded_file ]]; then
            file_in_exclude=1
            break
        fi
    done
    if [ $file_in_exclude == 1 ]; then
        echo "$file_name will not be checked for $PREFIX prefix" | tee -a $logfile
        continue
    fi
    for directory in "${DIRECTORIES_TO_CHECK[@]}"
    do 
        if [[ $file_path == $directory/* ]] || [[ $file_path == $file_name ]]; then
            for ext in "${EXTENSIONS_TO_CHECK[@]}"
            do
                if [[ $file_name != $PREFIX* ]] && [[ $file_name == *.$ext ]]; then
                    all_with_valid_prefixes=0
                    echo "$file_path does not have a $PREFIX prefix, please fix it manually." | tee -a $logfile
                fi
            done
        fi
    done
done

if [ $all_with_valid_prefixes == 0 ]; then
    echo "   [FAILED] There are functions without $PREFIX prefix. Abort committing." | tee -a $logfile
else
    echo "   [PASSED]" | tee -a $logfile
fi

###
# check whether committed files have the MIT license 
###
# include python scripts
EXTENSIONS_TO_CHECK=("m" "c" "cpp" "sh" "csh" "pl" "r")

mit_license="Written by [your name] and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md"
all_with_license=1
echo -e "\n==> [Check] Checking that committed files have MIT license.." | tee -a $logfile
for file_path in "${files_to_be_committed[@]}"
do
    file_in_exclude=0
    file_name=$(basename $file_path)
    for excluded_file in "${EXCLUDED_FILES[@]}"
    do
        if [[ $file_name == $excluded_file ]]; then
            file_in_exclude=1
            break
        fi
    done
    if [ $file_in_exclude == 1 ]; then
        echo "$file_name will not be checked for MIT license" | tee -a $logfile
        continue
    fi
    for directory in "${DIRECTORIES_TO_CHECK[@]}"
    do
        if [[ $file_path == $directory/* ]] || [[ $file_path == $file_name ]]; then
            for ext in "${EXTENSIONS_TO_CHECK[@]}"
            do
                if [[ $file_name = *.$ext ]]; then
                    license_line=`grep "MIT license" $file_path`
                    if [[ "$license_line" == "" ]]; then
                        all_with_license=0
                        echo "$file_path does not have a MIT license" | tee -a $logfile
                    elif [[ "$license_line" == *"CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md" && "$license_line" == *"Written by"* ]]; then
                        # do nothing
                        :
                    else
                        all_with_license=0
                        echo "$file_path does not follow our MIT license format: " | tee -a $logfile
                        echo "$mit_license" | tee -a $logfile
                    fi
                fi
            done
        fi
    done
done

if [ $all_with_license == 0 ]; then
    echo "   [FAILED] There are functions without or not following our MIT license. Abort committing." | tee -a $logfile
    echo "For matlab functions, you can use setup/check_license/CBIG_check_license_matlab_file.sh to add MIT license" | tee -a $logfile
    echo "For other languages, please add MIT license manually:" | tee -a $logfile
    echo "$mit_license" | tee -a $logfile
else
    echo "   [PASSED]" | tee -a $logfile
fi

###
# check whether committed files include any absolute paths (mnt, apps, data/users, share) 
###
abs_path_list=`cat $CBIG_CODE_DIR/hooks/list/absolute_path_list`
all_without_abs_path=1
echo -e "\n==> [Check] Checking that committed files do not include absolute paths.." | tee -a $logfile
for file_path in "${files_to_be_committed[@]}"
do
    file_in_exclude=0
    file_name=$(basename $file_path)
    for excluded_file in "${EXCLUDED_FILES[@]}"
    do
        if [[ $file_name == $excluded_file ]]; then
            file_in_exclude=1
            break
        fi
    done
    if [ $file_in_exclude == 1 ]; then
        echo "$file_name will not be checked for absolute paths." | tee -a $logfile
        continue
    fi
    for directory in "${DIRECTORIES_TO_CHECK[@]}"
    do
        if [[ $file_path == $directory/* ]] || [[ $file_path == $file_name ]]; then
            for ext in "${EXTENSIONS_TO_CHECK[@]}"
            do
                if [[ $file_name = *.$ext ]]; then
                    if [[ ! $file_name =~ "config" ]]; then
                        for path_keyword in $abs_path_list; do
                            abs_path=`grep $path_keyword $file_path`
                            if [[ ! "$abs_path" == "" ]] && [[ ! "$abs_path" == *"#"*$path_keyword* ]] && [[ ! "$abs_path" == *"%"*$path_keyword* ]] && [[ ! "$abs_path" == *"//"*$path_keyword* ]]; then
                                all_without_abs_path=0
                                echo "$file_path includes absolute path: $abs_path" | tee -a $logfile
                            fi
                        done
                    fi
                fi
            done
        fi
    done
done

if [ $all_without_abs_path == 0 ]; then
    echo "   [FAILED] There are files including absolute paths without environment variables. Abort committing." | tee -a $logfile
    echo "Please use environment variables." | tee -a $logfile
else
    echo "   [PASSED]" | tee -a $logfile
fi

###
# check whether committed files include any banned keywords (cp) 
###
banword_list=`cat $CBIG_CODE_DIR/hooks/list/banned_keyword_list`
all_without_banword=1
echo -e "\n==> [Check] Checking that committed files do not banned keywords.." | tee -a $logfile
for file_path in "${files_to_be_committed[@]}"
do
    file_in_exclude=0
    file_name=$(basename $file_path)
    for excluded_file in "${EXCLUDED_FILES[@]}"
    do
        if [[ $file_name == $excluded_file ]]; then
            file_in_exclude=1
            break
        fi
    done
    if [ $file_in_exclude == 1 ]; then
        echo "$file_name will not be checked for banned keywords." | tee -a $logfile
        continue
    fi
    for directory in "${DIRECTORIES_TO_CHECK[@]}"
    do
        if [[ $file_path == $directory/* ]] || [[ $file_path == $file_name ]]; then
            for ext in "${EXTENSIONS_TO_CHECK[@]}"
            do
                if [[ $file_name = *.$ext ]]; then
                    if [[ ! $file_name =~ "config" ]]; then
                        for banword in $banword_list; do
                            banword_line=`grep $banword $file_path`
                            if [[ ! "$banword_line" == "" ]] && [[ ! "$banword_line" == *"#"*$banword* ]] && [[ ! "$banword_line" == *"%"*$banword* ]] && [[ ! "$banword_line" == *"//"*$banword* ]]; then
                                all_without_banword=0
                                echo "$file_path includes banned keyword: $banword" | tee -a $logfile
                            fi
                        done
                    fi
                fi
            done
        fi
    done
done

if [ $all_without_banword == 0 ]; then
    echo "   [FAILED] There are files including banned keyworks. Abort committing." | tee -a $logfile
else
    echo "   [PASSED]" | tee -a $logfile
fi

###
# check whether committed files have lines whose length is more than 120 characters 
###
all_within_120=1
echo -e "\n==> [Check] Checking that committed files have lines whose length is within 120 characters .." | tee -a $logfile
for file_path in "${files_to_be_committed[@]}"
do
    file_in_exclude=0
    file_name=$(basename $file_path)
    for excluded_file in "${EXCLUDED_FILES[@]}"
    do
        if [[ $file_name == $excluded_file ]]; then
            file_in_exclude=1
            break
        fi
    done
    if [ $file_in_exclude == 1 ]; then
        echo "$file_name will not be checked for character limit" | tee -a $logfile
        continue
    fi
    for directory in "${DIRECTORIES_TO_CHECK[@]}"
    do
        if [[ $file_path == $directory/* ]] || [[ $file_path == $file_name ]]; then
            for ext in "${EXTENSIONS_TO_CHECK[@]}"
            do
                if [[ $file_name = *.$ext ]]; then
                    line_lengths=`awk '{print length}' $file_path`
                    i=1
                    for line_length in ${line_lengths}; do
                        if [ $line_length -gt 120 ]; then
                            echo "$file_name: Line $i: has $line_length characters > 120 characters. Shorten it." | tee -a $logfile
                            all_within_120=0
                        fi
                        i=$(($i+1))
                    done
                fi
            done
        fi
    done
done

if [ $all_within_120 == 0 ]; then
    echo "   [FAILED] There are scripts which does not follow 120 characters limit of each line. Abort committing." | tee -a $logfile
else
    echo "   [PASSED]"
fi

######
# 2. (committed files)[.m]{stable_projects, utilities, data}
######
files_to_be_committed=($(git diff --cached --name-status | awk '(($1 != "D") && ($1 != "U")) {if ($1 ~ /^R/) print $3; else print $2}'))

EXTENSIONS_TO_CHECK=("m")
DIRECTORIES_TO_CHECK=("stable_projects" "utilities" "data")
EXCLUDED_FILES=("Surf2SurfGui.m" "Vol2SurfGui.m" "CBIG_tested_config.sh" "CBIG_tested_config.csh" "tested_startup.m")

###
# If a matlab function has addpath(xxx) at the begining, check whether it has rmpath(xxx) in the end
###
all_with_valid_rmpath=1
echo -e "\n==> [Check] If you 'addpath' at the begining of a matlab function, check 'rmpath' at the end.."
for file_path in "${files_to_be_committed[@]}"
do
    file_in_exclude=0
    file_name=$(basename $file_path)
    for excluded_file in "${EXCLUDED_FILES[@]}"
    do
        if [[ "$file_name" == *"$excluded_file"* ]]; then
            file_in_exclude=1
            break
        fi
    done
    if [ $file_in_exclude == 1 ]; then
        echo "$file_name will not be checked for rmpath" | tee -a $logfile
        continue
    fi
    for directory in "${DIRECTORIES_TO_CHECK[@]}"
    do 
        if [[ $file_path == $directory/* ]] || [[ $file_path == $file_name ]]; then
            for ext in "${EXTENSIONS_TO_CHECK[@]}"
            do
                if [[ $file_name == *.$ext ]]; then
                    tmpfile=$(mktemp)
                    grep addpath $file_path > $tmpfile
                    while read addpath_match
                    do
                        rmpath_line=${addpath_match//addpath/rmpath}
                        rmpath_line_left_backslash=`echo $rmpath_line | sed -e 's/[[]/\\\[/g'`
                        rmpath_line_backslash=`echo $rmpath_line_left_backslash | sed -e 's/[]]/\\\]/g'`
                        rmpath_match=(`grep "$rmpath_line_backslash" $file_path`)
                        if [[ "$rmpath_match" == "" ]]; then
                            all_with_valid_rmpath=0
                            echo "$file_path does not have a '$rmpath_line' at the end, please fix it manually." | tee -a $logfile
                        fi
                    done < $tmpfile
                    rm $tmpfile
                fi
            done
        fi
    done
done

if [ $all_with_valid_rmpath == 0 ]; then
    echo "   [FAILED] There are functions without 'rmpath' at the end. Abort committing." | tee -a $logfile
else
    echo "   [PASSED]"
fi

######
# 3. (folders of committed files)[@xxx]{stable_projects, utilities, data}
######
files_to_be_committed=($(git diff --cached --name-status | awk '(($1 != "D") && ($1 != "U")) {if ($1 ~ /^R/) print $3; else print $2}'))

# find the folders of comitted files
cnt=${#files_to_be_committed[@]}
for ((i=0;i<cnt;i++))
do
    folders_to_be_committed[i]=$(dirname ${files_to_be_committed[i]})
done
unique_folders_to_be_committed=$(echo ${folders_to_be_committed[@]} | tr ' ' '\n' | sort -u | tr '\n' ' ')

DIRECTORIES_TO_CHECK=("stable_projects" "utilities" "data")

###
# check whether matlab classes have CBIG_ prefix
###
PREFIX="CBIG_"
echo -e "\n==> [Check] Checking that matlab classes have $PREFIX prefix.." | tee -a $logfile

all_with_valid_prefixes=1
for folder in "${folders_to_be_committed[@]}"
do
    for directory in "${DIRECTORIES_TO_CHECK[@]}"
    do
        if [[ $folder == $directory/* ]] && [[ $folder == *@* ]]; then
            if [[ $folder != *@${PREFIX}* ]]; then
                all_with_valid_prefixes=0
                echo "Matlab class $folder does not have a $PREFIX prefix, please fix it manually." | tee -a $logfile
            fi
        fi
    done
done
if [ $all_with_valid_prefixes == 0 ]; then
    echo "   [FAILED] There are Matlab classes without $PREFIX prefix. Abort committing." | tee -a $logfile
else
    echo "   [PASSED]" | tee -a $logfile
fi

######
# 4. (committed files)[.py]{stable_projects, utilities, data}
######
files_to_be_committed=($(git diff --cached --name-status | awk '(($1 != "D") && ($1 != "U")) {if ($1 ~ /^R/) print $3; else print $2}'))

EXTENSIONS_TO_CHECK=("py")
DIRECTORIES_TO_CHECK=("stable_projects" "utilities" "data")
EXCLUDED_FILES=("Surf2SurfGui.m" "Vol2SurfGui.m" "CBIG_tested_config.sh" "CBIG_tested_config.csh" "tested_startup.m")

# check mit license
all_python_mit=1
echo -e "\n==> [Check] Checking that committed python files have mit license.." | tee -a $logfile
for file_path in "${files_to_be_committed[@]}"
do
    file_in_exclude=0
    file_name=$(basename $file_path)
    for excluded_file in "${EXCLUDED_FILES[@]}"
    do
        if [[ $file_name == $excluded_file ]]; then
            file_in_exclude=1
            break
        fi
    done
    if [ $file_in_exclude == 1 ]; then
        echo "$file_name will not be checked for mit license" | tee -a $logfile
        continue
    fi
    for directory in "${DIRECTORIES_TO_CHECK[@]}"
    do
        if [[ $file_path == $directory/* ]] || [[ $file_path == $file_name ]]; then
            for ext in "${EXTENSIONS_TO_CHECK[@]}"
            do
                if [[ $file_name = *.$ext ]]; then
                    license_line_num=`grep -n "MIT license" $file_path | cut -d : -f 1`
                    link_line_num=$((${license_line_num}+1))
                    license_line=$(sed -n ${license_line_num}p $file_path)
                    link_line=$(sed -n ${link_line_num}p $file_path)
                    if [[ "$license_line" == "" ]]; then
                        all_python_mit=0
                        echo "$file_path does not have a MIT license" | tee -a $logfile
                    elif [[ "$license_line" == *"CBIG under MIT license:" && "$license_line" == *"Written by"* \
                        && "$link_line" == *"https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md" ]]; then
                        # do nothing
                        :
                    else
                        all_python_mit=0
                        echo "$file_path does not follow our MIT license format: " | tee -a $logfile
                        echo "Written by XXX and CBIG under MIT license:" | tee -a $logfile
                        echo "https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md" | tee -a $logfile
                    fi
                fi
            done
        fi
    done
done

if [ $all_python_mit == 0 ]; then
    echo "   [FAILED] There are python scripts which does not have mit license. Abort committing." | tee -a $logfile
else
    echo "   [PASSED]" | tee -a $logfile
fi

# use yapf to check code format
all_yapf_format=1
echo -e "\n==> [Check] Checking that committed python files follow yapf pep8 format .." | tee -a $logfile
for file_path in "${files_to_be_committed[@]}"
do
    file_in_exclude=0
    file_name=$(basename $file_path)
    for excluded_file in "${EXCLUDED_FILES[@]}"
    do
        if [[ $file_name == $excluded_file ]]; then
            file_in_exclude=1
            break
        fi
    done
    if [ $file_in_exclude == 1 ]; then
        echo "$file_name will not be checked for pep8 format" | tee -a $logfile
        continue
    fi
    for directory in "${DIRECTORIES_TO_CHECK[@]}"
    do
        if [[ $file_path == $directory/* ]] || [[ $file_path == $file_name ]]; then
            for ext in "${EXTENSIONS_TO_CHECK[@]}"
            do
                if [[ $file_name = *.$ext ]]; then
                    yapf_output=$(PYTHONPATH=${CBIG_CODE_DIR}/external_packages/python/yapf-master \
                    python ${CBIG_CODE_DIR}/external_packages/python/yapf-master/yapf -d ${file_path})
                    if [ ! -z "$yapf_output" ]; then
                        echo "$file_path does not follow yapf pep8 format please use following command to format it." | tee -a $logfile
                        echo "PYTHONPATH=\${CBIG_CODE_DIR}/external_packages/python/yapf-master \
python \${CBIG_CODE_DIR}/external_packages/python/yapf-master/yapf -i ${file_path}" | tee -a $logfile
                        all_yapf_format=0
                    fi
                fi
            done
        fi
    done
done

if [ $all_yapf_format == 0 ]; then
    echo "   [FAILED] There are python scripts which does not follow yapf pep8 format. Abort committing." | tee -a $logfile
else
    echo "   [PASSED]" | tee -a $logfile
fi

# use flake8 to check code syntax, style and complexity
all_flake8_format=1
echo -e "\n==> [Check] Checking that committed python files follow flake8 format .." | tee -a $logfile
for file_path in "${files_to_be_committed[@]}"
do
    file_in_exclude=0
    file_name=$(basename $file_path)
    for excluded_file in "${EXCLUDED_FILES[@]}"
    do
        if [[ $file_name == $excluded_file ]]; then
            file_in_exclude=1
            break
        fi
    done
    if [ $file_in_exclude == 1 ]; then
        echo "$file_name will not be checked by flake8" | tee -a $logfile
        continue
    fi
    for directory in "${DIRECTORIES_TO_CHECK[@]}"
    do
        if [[ $file_path == $directory/* ]] || [[ $file_path == $file_name ]]; then
            for ext in "${EXTENSIONS_TO_CHECK[@]}"
            do
                if [[ $file_name = *.$ext ]]; then
                    flake8_version=$(flake8 --version | cut -d " " -f 1)
                    if [ "$flake8_version" != "3.7.7" ]; then
                        echo "[FAILDED] You do not have flake8 or installed a different version" | tee -a $logfile
                        echo "Please install flake8 3.7.7:" | tee -a $logfile
                        echo "pip install flake8==3.7.7" | tee -a $logfile
                        exit 1
                    fi
                    flake8_output=$(flake8 --count ${file_path})
                    if [ "$flake8_output" != 0 ]; then
                        echo "$file_path does not follow flake8. Please fix the errors and warnings" | tee -a $logfile
                        flake8 --count ${file_path} | tee -a $logfile
                        all_flake8_format=0
                    fi
                fi
            done
        fi
    done
done

if [ $all_flake8_format == 0 ]; then
    echo "   [FAILED] There are python scripts which does not follow flake8. Abort committing." | tee -a $logfile
else
    echo "   [PASSED]" | tee -a $logfile
fi

###
# if any checks failed,exit the program
###
if [ $all_with_valid_prefixes == 0 -o $all_with_license == 0 -o $all_without_abs_path == 0 -o $all_without_banword == 0 \
    -o $all_within_120 == 0 -o $all_with_valid_rmpath == 0 -o $all_with_valid_prefixes == 0 -o $all_python_mit == 0 \
    -o $all_yapf_format == 0 -o $all_flake8_format == 0 ]; then
    echo "[FAILED] Some checks failed." | tee -a $logfile
    echo "Check pre-commit hook log file: $logfile" | tee -a $logfile
    exit 1
else
    echo "[PASSED]" | tee -a $logfile
    echo "Check pre-commit hook log file: $logfile" | tee -a $logfile
fi


git add .

exit 0
