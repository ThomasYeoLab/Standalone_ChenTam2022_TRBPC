function CBIG_TRBPC_compute_PFM_permutation_stats(FC_mean_file, y_file, krr_folds, ...
    perm_seed_start, perm_num, site_list, outdir)

% CBIG_TRBPC_compute_PFM_permutation_stats(FC_mean_file, y_file, krr_folds, ...
%    perm_seed_start, perm_num, outdir)
%
% This function compute the predictive-feature vaules averaged within
% network blocks when the target variables are permuted.
%
% Inputs:
%   - FC_mean_file
%     A .mat file containing the functional connectivity averaged within
%     network blocks. This file is generated by "CBIG_TRBPC_prepare_PFM_inputs.m"
%
%   - y_file
%     A .mat file contains the target variable after regressing out covariates
%     for each cross validation splits. This file is generated by 
%     "CBIG_TRBPC_prepare_PFM_inputs.m"
%
%   - cov_mat
%     A .mat file contains the covaritesof the regression model. A
%     varaible named "covariates" is stored in the file. "covariates"
%     is a matrix of size #subjects X #covariates
%
%   - krr_folds
%     A .mat file containing the indices of training subjects in each cross
%     validation splits. This file is generated by "CBIG_TRBPC_prepare_PFM_inputs.m"
%
%   - perm_seed_start
%     A scalar. The function will do the permutation N_perm times using
%     permutation seed from perm_seed_start to perm_seed_start+N_perm-1
%
%   - perm_num
%     Number of permutation
%
%   - site_list
%     A text file where each line is the site ID of one subject. Permutation
%     will only be performed within sites
%
%   - outdir
%     Output directory for the permutation results
%
% Outputs:
%     Predictive-feature vaules averaged within network blocks when the target variables 
%     are permuted will be stored in outdir
%
% Written by Jianzhong Chen and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md

%% parse input
project_code_dir = fullfile(getenv('CBIG_CODE_DIR'),'stable_projects','predict_phenotypes', 'ChenTam2022_TRBPC');
addpath(genpath(project_code_dir));

if(isstr(perm_seed_start))
    perm_seed_start = str2num(perm_seed_start);
end
if(isstr(perm_num))
    perm_num = str2num(perm_num);
end

%% load data
load(FC_mean_file, 'FC_network_mean');
N_edge = size(FC_network_mean,1);

load(y_file, 'y_regress');
N_score = size(y_regress{1},2);

load(krr_folds);
folds = folds(:);
N_fold = length(folds);
N_sub = length(folds{1});

%% load site ID
site_all = CBIG_text2cell(site_list);
[~, ~, site_ind] = unique(site_all);
N_site = max(site_ind);

%% compute PFM under permuted target variable
PFM_score_perm = zeros(N_edge,N_score,perm_num);
for i = 1:perm_num
    
    % permute within site
    rng(i+perm_seed_start-1);
    perm_ind = 1:length(site_all);
    for k = 1:N_site
        tmp = perm_ind(site_ind == k);
        tmp = tmp(randperm(length(tmp)));
        perm_ind(site_ind == k) = tmp;
    end
    
    % compute activation
    activation_score_fold = zeros(N_edge,N_score,N_fold);
    for j = 1:N_fold
        train_ind = folds{j};
        y_resid = y_regress{j};
        y_resid = y_resid(perm_ind,:);
        y_resid = y_resid(train_ind,:);
        features_train = FC_network_mean(:,train_ind);
        curr_cov = CBIG_TRBPC_compute_covariance(features_train',y_resid);
        activation_score_fold(:,:,j) = bsxfun(@times,curr_cov,1./std(y_resid));
    end
    
    PFM_score_perm(:,:,i) = mean(activation_score_fold,3);
end
save([outdir '/PFM_score_perm_start' num2str(perm_seed_start) '.mat'],'PFM_score_perm');
rmpath(genpath(project_code_dir));
end